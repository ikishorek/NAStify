diff -Nur a/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHKeychainUtils.h b/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHKeychainUtils.h
--- a/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHKeychainUtils.h	2014-11-03 22:13:26.000000000 +0100
+++ b/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHKeychainUtils.h	2014-11-03 22:13:51.000000000 +0100
@@ -36,8 +36,8 @@
 	
 }
 
-+ (NSString *) getPasswordForUsername: (NSString *) username andServiceName: (NSString *) serviceName error: (NSError **) error;
-+ (BOOL) storeUsername: (NSString *) username andPassword: (NSString *) password forServiceName: (NSString *) serviceName updateExisting: (BOOL) updateExisting error: (NSError **) error;
-+ (BOOL) deleteItemForUsername: (NSString *) username andServiceName: (NSString *) serviceName error: (NSError **) error;
++ (NSString *) getPasswordForUsername: (NSString *) username andServiceName: (NSString *) serviceName andAccessGroup: (NSString *)accessGroup error: (NSError **) error;
++ (BOOL) storeUsername: (NSString *) username andPassword: (NSString *) password forServiceName: (NSString *) serviceName andAccessGroup: (NSString *)accessGroup updateExisting: (BOOL) updateExisting error: (NSError **) error;
++ (BOOL) deleteItemForUsername: (NSString *) username andServiceName: (NSString *) serviceName andAccessGroup: (NSString *)accessGroup error: (NSError **) error;
 
 @end
\ No newline at end of file
diff -Nur a/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHKeychainUtils.m b/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHKeychainUtils.m
--- a/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHKeychainUtils.m	2014-11-03 22:13:26.000000000 +0100
+++ b/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHKeychainUtils.m	2014-11-03 22:13:51.000000000 +0100
@@ -39,7 +39,7 @@
 @implementation LTHKeychainUtils
 
 
-+ (NSString *) getPasswordForUsername: (NSString *) username andServiceName: (NSString *) serviceName error: (NSError **) error {
++ (NSString *) getPasswordForUsername: (NSString *) username andServiceName: (NSString *) serviceName andAccessGroup: (NSString *)accessGroup error: (NSError **) error {
 	
 	if (!username || !serviceName) {
 		if (error != nil) {
@@ -55,6 +55,12 @@
 	NSArray *keys = [[NSArray alloc] initWithObjects: (__bridge_transfer NSString *) kSecClass, kSecAttrAccount, kSecAttrService, nil];
 	NSArray *objects = [[NSArray alloc] initWithObjects: (__bridge_transfer NSString *) kSecClassGenericPassword, username, serviceName, nil];
 	NSMutableDictionary *query = [[NSMutableDictionary alloc] initWithObjects: objects forKeys: keys];
+#if !TARGET_IPHONE_SIMULATOR
+	if (accessGroup)
+	{
+		[query setObject:accessGroup forKey: (__bridge_transfer NSString *) kSecAttrAccessGroup];
+	}
+#endif
 	// First do a query for attributes, in case we already have a Keychain item with no password data set.
 	// One likely way such an incorrect item could have come about is due to the previous (incorrect)
 	// version of this code (which set the password as a generic attribute instead of password data).
@@ -114,7 +120,7 @@
 	return password;
 }
 
-+ (BOOL) storeUsername: (NSString *) username andPassword: (NSString *) password forServiceName: (NSString *) serviceName updateExisting: (BOOL) updateExisting error: (NSError **) error
++ (BOOL) storeUsername: (NSString *) username andPassword: (NSString *) password forServiceName: (NSString *) serviceName andAccessGroup: (NSString *)accessGroup updateExisting: (BOOL) updateExisting error: (NSError **) error
 
 {
 	if (!username || !password || !serviceName)
@@ -130,7 +136,7 @@
     // See if we already have a password entered for these credentials.
 	
 	NSError *getError = nil;
-	NSString *existingPassword = [self getPasswordForUsername: username andServiceName: serviceName error:&getError];
+	NSString *existingPassword = [self getPasswordForUsername: username andServiceName: serviceName andAccessGroup:accessGroup error:&getError];
 	
 	if ([getError code] == -1999)
 	{
@@ -139,7 +145,7 @@
 		// Delete the existing item before moving on entering a correct one.
 		getError = nil;
 		
-		[self deleteItemForUsername: username andServiceName: serviceName error: &getError];
+		[self deleteItemForUsername: username andServiceName: serviceName andAccessGroup:accessGroup error: &getError];
 		
 		if ([getError code] != noErr)
 		{
@@ -179,7 +185,13 @@
 			
 			NSArray *objects = [[NSArray alloc] initWithObjects: (__bridge_transfer NSString *) kSecClassGenericPassword,serviceName,serviceName,username,nil];
 			
-			NSDictionary *query = [[NSDictionary alloc] initWithObjects: objects forKeys: keys];
+			NSMutableDictionary *query = [[NSMutableDictionary alloc] initWithObjects: objects forKeys: keys];
+#if !TARGET_IPHONE_SIMULATOR
+			if (accessGroup)
+			{
+				[query setObject:accessGroup forKey:(__bridge_transfer NSString *) kSecAttrAccessGroup];
+			}
+#endif
 			
 			status = SecItemUpdate((__bridge CFDictionaryRef) query, (__bridge CFDictionaryRef) [NSDictionary dictionaryWithObject: [password dataUsingEncoding: NSUTF8StringEncoding] forKey: (__bridge_transfer NSString *) kSecValueData]);
 		}
@@ -195,7 +207,13 @@
 		
 		NSArray *objects = [[NSArray alloc] initWithObjects: (__bridge_transfer NSString *) kSecClassGenericPassword,serviceName,serviceName,username,[password dataUsingEncoding: NSUTF8StringEncoding],nil];
 		
-		NSDictionary *query = [[NSDictionary alloc] initWithObjects: objects forKeys: keys];
+		NSMutableDictionary *query = [[NSMutableDictionary alloc] initWithObjects: objects forKeys: keys];
+#if !TARGET_IPHONE_SIMULATOR
+		if (accessGroup)
+		{
+			[query setObject:accessGroup forKey:(__bridge_transfer NSString *) kSecAttrAccessGroup];
+		}
+#endif
 		
 		status = SecItemAdd((__bridge CFDictionaryRef) query, NULL);
 	}
@@ -208,7 +226,7 @@
 	return YES;
 }
 
-+ (BOOL) deleteItemForUsername: (NSString *) username andServiceName: (NSString *) serviceName error: (NSError **) error
++ (BOOL) deleteItemForUsername: (NSString *) username andServiceName: (NSString *) serviceName andAccessGroup: (NSString *)accessGroup error: (NSError **) error
 {
 	if (!username || !serviceName)
 	{
@@ -224,7 +242,13 @@
 	}
 	NSArray *keys = [[NSArray alloc] initWithObjects: (__bridge_transfer NSString *) kSecClass, kSecAttrAccount, kSecAttrService, kSecReturnAttributes, nil];
 	NSArray *objects = [[NSArray alloc] initWithObjects: (__bridge_transfer NSString *) kSecClassGenericPassword, username, serviceName, kCFBooleanTrue, nil];
-	NSDictionary *query = [[NSDictionary alloc] initWithObjects: objects forKeys: keys];
+    NSMutableDictionary *query = [[NSMutableDictionary alloc] initWithObjects: objects forKeys: keys];
+#if !TARGET_IPHONE_SIMULATOR
+	if (accessGroup)
+	{
+		[query setObject:accessGroup forKey:(__bridge_transfer NSString *) kSecAttrAccessGroup];
+	}
+#endif
 	OSStatus status = SecItemDelete((__bridge CFDictionaryRef) query);
 	
 	if (error != nil && status != noErr)
diff -Nur a/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHPasscodeViewController.h b/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHPasscodeViewController.h
--- a/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHPasscodeViewController.h	2014-11-03 22:13:26.000000000 +0100
+++ b/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHPasscodeViewController.h	2014-11-03 22:13:51.000000000 +0100
@@ -14,6 +14,7 @@
  @brief Called right before the passcode view controller will be dismissed or popped.
  */
 - (void)passcodeViewControllerWillClose;
+- (void)passcodeViewControllerWillClose:(NSNumber *)passcodeWasEnteredSuccessfully;
 /**
  @brief Called when the max number of failed attempts has been reached.
  */
@@ -172,6 +173,10 @@
  */
 @property (nonatomic, strong) NSString  *keychainServiceName;
 /**
+ @brief The string to be used as access group name for all the Keychain entries.
+ */
+@property (nonatomic, strong) NSString  *keychainAccessGroup;
+/**
  @brief The character for the passcode digit.
  */
 @property (nonatomic, strong) NSString  *passcodeCharacter;
@@ -253,7 +258,15 @@
  @param hasLogout   Set to @c YES for a navBar with a Logout button, set to @c NO for no navBar.
  @param logoutTitle The title of the Logout button.
  */
+#ifndef LTH_APP_EXTENSION
 - (void)showLockScreenWithAnimation:(BOOL)animated withLogout:(BOOL)hasLogout andLogoutTitle:(NSString*)logoutTitle;
+#endif
+/**
+ @brief				   Used for displaying the lock. The passcode view is added in the specified viewController.
+ @param	viewController The view controller where the passcode view controller will be displayed.
+ @param asModal        Set to @c YES to present as a modal, or to @c NO to push on the current nav stack.
+ */
+- (void)showLockScreenInViewController:(UIViewController *)viewController asModal:(BOOL)isModal;
 /**
  @brief				   Used for enabling the passcode.
  @details              The back bar button is hidden by default. Set @c hidesBackButton to @c NO if you want it to be visible.
diff -Nur a/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHPasscodeViewController.m b/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHPasscodeViewController.m
--- a/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHPasscodeViewController.m	2014-11-03 22:13:26.000000000 +0100
+++ b/Pods/LTHPasscodeViewController/LTHPasscodeViewController/LTHPasscodeViewController.m	2014-11-03 22:13:51.000000000 +0100
@@ -127,7 +127,7 @@
 
 #pragma mark - Private methods
 - (void)_close {
-    if (_displayedAsLockScreen) [self _dismissMe];
+    if (_displayedAsLockScreen) [self _dismissMe:nil];
     else [self _cancelAndDismissMe];
 }
 
@@ -150,8 +150,9 @@
     
 	NSString *keychainValue =
     [LTHKeychainUtils getPasswordForUsername:_keychainTimerDurationUsername
-                               andServiceName:_keychainServiceName
-                                        error:nil];
+                              andServiceName:_keychainServiceName
+                              andAccessGroup:_keychainAccessGroup
+                                       error:nil];
 	if (!keychainValue) return -1;
 	return keychainValue.doubleValue;
 }
@@ -166,10 +167,11 @@
     }
     
     [LTHKeychainUtils storeUsername:_keychainTimerDurationUsername
-						 andPassword:[NSString stringWithFormat: @"%.6f", duration]
-					  forServiceName:_keychainServiceName
-					  updateExisting:YES
-							   error:nil];
+                        andPassword:[NSString stringWithFormat: @"%.6f", duration]
+                     forServiceName:_keychainServiceName
+                     andAccessGroup:_keychainAccessGroup
+                     updateExisting:YES
+                              error:nil];
 }
 
 
@@ -181,7 +183,8 @@
     
     NSString *keychainValue =
     [LTHKeychainUtils getPasswordForUsername:_keychainTimerStartUsername
-                               andServiceName:_keychainServiceName
+                              andServiceName:_keychainServiceName
+                              andAccessGroup:_keychainAccessGroup
                                         error:nil];
 	if (!keychainValue) return -1;
 	return keychainValue.doubleValue;
@@ -197,9 +200,10 @@
     }
     
 	[LTHKeychainUtils storeUsername:_keychainTimerStartUsername
-						 andPassword:[NSString stringWithFormat: @"%.6f",
-                                      [NSDate timeIntervalSinceReferenceDate]]
+                        andPassword:[NSString stringWithFormat: @"%.6f",
+                                     [NSDate timeIntervalSinceReferenceDate]]
 					  forServiceName:_keychainServiceName
+                      andAccessGroup:_keychainAccessGroup
 					  updateExisting:YES
 							   error:nil];
 }
@@ -229,8 +233,9 @@
     }
     
 	[LTHKeychainUtils deleteItemForUsername:_keychainPasscodeUsername
-							  andServiceName:_keychainServiceName
-									   error:nil];
+                             andServiceName:_keychainServiceName
+                             andAccessGroup:_keychainAccessGroup
+                                      error:nil];
 }
 
 
@@ -243,10 +248,11 @@
     }
     
     [LTHKeychainUtils storeUsername:_keychainPasscodeUsername
-                         andPassword:passcode
-                      forServiceName:_keychainServiceName
-                      updateExisting:YES
-                               error:nil];
+                        andPassword:passcode
+                     forServiceName:_keychainServiceName
+                     andAccessGroup:_keychainAccessGroup
+                     updateExisting:YES
+                              error:nil];
 }
 
 
@@ -257,8 +263,9 @@
 	}
 	
 	return [LTHKeychainUtils getPasswordForUsername:_keychainPasscodeUsername
-									  andServiceName:_keychainServiceName
-											   error:nil];
+                                     andServiceName:_keychainServiceName
+                                     andAccessGroup:_keychainAccessGroup
+                                              error:nil];
 }
 
 - (void)_setupFingerPrint {
@@ -282,7 +289,7 @@
                                        }
                                        
                                        if (success) {
-                                           [self performSelectorOnMainThread:@selector(_dismissMe) withObject:nil waitUntilDone:NO];
+                                           [self performSelectorOnMainThread:@selector(_dismissMe:) withObject:[NSNumber numberWithBool:YES] waitUntilDone:NO];
                                        } else {
                                            [self performSelectorOnMainThread:@selector(_resetUI) withObject:nil waitUntilDone:NO];
                                        }
@@ -348,20 +355,23 @@
     _isUserSwitchingBetweenPasscodeModes = NO;
 	[self _resetUI];
 	[_passcodeTextField resignFirstResponder];
-	
+
+    if ([self.delegate respondsToSelector: @selector(passcodeViewControllerWillClose:)]) {
+        [self.delegate performSelector: @selector(passcodeViewControllerWillClose:) withObject:[NSNumber numberWithBool:NO]];
+    }
     if ([self.delegate respondsToSelector: @selector(passcodeViewControllerWillClose)]) {
 		[self.delegate performSelector: @selector(passcodeViewControllerWillClose)];
     }
 // Or, if you prefer by notifications:
 //	[[NSNotificationCenter defaultCenter] postNotificationName: @"passcodeViewControllerWillClose"
-//														object: self
+//														object: [NSNumber numberWithBool:NO]
 //													  userInfo: nil];
 	if (_displayedAsModal) [self dismissViewControllerAnimated:YES completion:nil];
 	else if (!_displayedAsLockScreen) [self.navigationController popViewControllerAnimated:YES];
 }
 
 
-- (void)_dismissMe {
+- (void)_dismissMe:(NSNumber *)success {
     _failedAttempts = 0;
 	_isCurrentlyOnScreen = NO;
 	[self _resetUI];
@@ -371,6 +381,7 @@
             if (LTHiOS8) {
                 self.view.center = CGPointMake(self.view.center.x, self.view.center.y * 2.f);
             }
+#ifndef LTH_APP_EXTENSION
             else {
                 if ([UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationLandscapeLeft) {
                     self.view.center = CGPointMake(self.view.center.x * -1.f, self.view.center.y);
@@ -385,6 +396,7 @@
                     self.view.center = CGPointMake(self.view.center.x, self.view.center.y * 2.f);
                 }
             }
+#endif
 		}
 		else {
 			// Delete from Keychain
@@ -404,16 +416,28 @@
 			}
 		}
 	} completion: ^(BOOL finished) {
+        if ([self.delegate respondsToSelector: @selector(passcodeViewControllerWillClose:)]) {
+            [self.delegate performSelector: @selector(passcodeViewControllerWillClose:) withObject:success];
+        }
         if ([self.delegate respondsToSelector: @selector(passcodeViewControllerWillClose)]) {
             [self.delegate performSelector: @selector(passcodeViewControllerWillClose)];
         }
 // Or, if you prefer by notifications:
 //		[[NSNotificationCenter defaultCenter] postNotificationName: @"passcodeViewControllerWillClose"
-//															object: self
+//															object: success
 //														  userInfo: nil];
 		if (_displayedAsLockScreen) {
+			if (_displayedAsModal) {
+				[self dismissViewControllerAnimated:YES
+										 completion:nil];
+			}
 			[self.view removeFromSuperview];
 			[self removeFromParentViewController];
+			if ([success boolValue]) {
+				if ([self.delegate respondsToSelector: @selector(passcodeWasEnteredSuccessfully)]) {
+					[self.delegate performSelector: @selector(passcodeWasEnteredSuccessfully)];
+				}
+			}
 		}
         else if (_displayedAsModal) {
             [self dismissViewControllerAnimated:YES
@@ -423,19 +447,22 @@
             [self.navigationController popViewControllerAnimated:NO];
         }
 	}];
-	[[NSNotificationCenter defaultCenter]
-     removeObserver: self
-     name: UIApplicationDidChangeStatusBarOrientationNotification
-     object: nil];
-	[[NSNotificationCenter defaultCenter]
-     removeObserver: self
-     name: UIApplicationDidChangeStatusBarFrameNotification
-     object: nil];
+	if (!LTHiOS8) {
+		[[NSNotificationCenter defaultCenter]
+         removeObserver: self
+         name: UIApplicationDidChangeStatusBarOrientationNotification
+     	 object: nil];
+		[[NSNotificationCenter defaultCenter]
+         removeObserver: self
+         name: UIApplicationDidChangeStatusBarFrameNotification
+         object: nil];
+    }
 }
 
 
 #pragma mark - UI setup
 - (void)_setupViews {
+#ifndef LTH_APP_EXTENSION
     _coverView = [[UIView alloc] initWithFrame: CGRectZero];
     _coverView.backgroundColor = _coverViewBackgroundColor;
     _coverView.frame = self.view.frame;
@@ -443,6 +470,7 @@
     _coverView.tag = _coverViewTag;
     _coverView.hidden = YES;
     [[UIApplication sharedApplication].keyWindow addSubview: _coverView];
+#endif
     
     _complexPasscodeOverlayView = [[UIView alloc] initWithFrame:CGRectZero];
     _complexPasscodeOverlayView.backgroundColor = [UIColor whiteColor];
@@ -777,11 +805,13 @@
 
 
 #pragma mark - Displaying
+#ifndef LTH_APP_EXTENSION
 - (void)showLockscreenWithoutAnimation {
 	[self showLockScreenWithAnimation:NO withLogout:NO andLogoutTitle:nil];
 }
+#endif
 
-
+#ifndef LTH_APP_EXTENSION
 - (void)showLockScreenWithAnimation:(BOOL)animated withLogout:(BOOL)hasLogout andLogoutTitle:(NSString*)logoutTitle {
 	[self _prepareAsLockScreen];
     
@@ -877,6 +907,7 @@
 		_isCurrentlyOnScreen = YES;
 	}
 }
+#endif
 
 
 - (void)_prepareNavigationControllerWithController:(UIViewController *)viewController {
@@ -920,6 +951,15 @@
 }
 
 
+- (void)showLockScreenInViewController:(UIViewController *)viewController asModal:(BOOL)isModal
+{
+	_displayedAsModal = isModal;
+	[self _prepareAsLockScreen];
+	[self _prepareNavigationControllerWithController:viewController];
+	self.title = NSLocalizedStringFromTable(self.enterPasscodeString, _localizationTableName, @"");
+}
+
+
 - (void)showForEnablingPasscodeInViewController:(UIViewController *)viewController
 										asModal:(BOOL)isModal {
 	_displayedAsModal = isModal;
@@ -1066,7 +1106,7 @@
         else if (_isUserConfirmingPasscode) {
             // User entered the confirmation Passcode correctly
             if ([typedString isEqualToString: _tempPasscode]) {
-                [self _dismissMe];
+                [self _dismissMe:nil];
             }
             // User entered the confirmation Passcode incorrectly, start over.
             else {
@@ -1097,10 +1137,7 @@
 //            [[NSNotificationCenter defaultCenter] postNotificationName: @"passcodeWasEnteredSuccessfully"
 //                                                                object: self
 //                                                              userInfo: nil];
-            [self _dismissMe];
-            if ([self.delegate respondsToSelector: @selector(passcodeWasEnteredSuccessfully)]) {
-                [self.delegate performSelector: @selector(passcodeWasEnteredSuccessfully)];
-            }
+            [self _dismissMe:[NSNumber numberWithBool:YES]];
         }
         else {
             [self performSelector: @selector(_denyAccess)
@@ -1261,8 +1298,9 @@
 	// If there's no passcode saved in Keychain,
     // the user is adding one for the first time, otherwise he's changing his passcode.
 	NSString *savedPasscode = [LTHKeychainUtils getPasswordForUsername: _keychainPasscodeUsername
-														 andServiceName: _keychainServiceName
-																  error: nil];
+														andServiceName: _keychainServiceName
+														andAccessGroup: _keychainAccessGroup
+																 error: nil];
 	_enterPasscodeLabel.text = savedPasscode.length == 0 ? NSLocalizedStringFromTable(self.enterPasscodeString, _localizationTableName, @"") : NSLocalizedStringFromTable(self.enterNewPasscodeString, _localizationTableName, @"");
 	
 	_failedAttemptLabel.hidden = NO;
@@ -1304,6 +1342,7 @@
 }
 
 #pragma mark - Notification Observers
+#ifndef LTH_APP_EXTENSION
 - (void)_applicationDidEnterBackground {
 	if ([self _doesPasscodeExist]) {
 		if ([_passcodeTextField isFirstResponder])
@@ -1327,13 +1366,17 @@
 		}
 	}
 }
+#endif
 
 
+#ifndef LTH_APP_EXTENSION
 - (void)_applicationDidBecomeActive {
 	_coverView.hidden = YES;
 }
+#endif
 
 
+#ifndef LTH_APP_EXTENSION
 - (void)_applicationWillEnterForeground {
 	if ([self _doesPasscodeExist] &&
 		[self _didPasscodeTimerEnd]) {
@@ -1355,14 +1398,16 @@
         }
 	}
 }
+#endif
 
 
+#ifndef LTH_APP_EXTENSION
 - (void)_applicationWillResignActive {
 	if ([self _doesPasscodeExist]) {
 		[self _saveTimerStartTime];
 	}
 }
-
+#endif
 
 #pragma mark - Init
 + (instancetype)sharedUser {
@@ -1491,10 +1536,12 @@
     _keychainTimerStartUsername = @"demoPasscodeTimerStart";
     _keychainServiceName = @"demoServiceName";
     _keychainTimerDurationUsername = @"passcodeTimerDuration";
+    _keychainAccessGroup = nil;
 }
 
 
 - (void)_addObservers {
+#ifndef LTH_APP_EXTENSION
     [[NSNotificationCenter defaultCenter]
      addObserver: self
      selector: @selector(_applicationDidEnterBackground)
@@ -1515,16 +1562,20 @@
      selector: @selector(_applicationWillEnterForeground)
      name: UIApplicationWillEnterForegroundNotification
      object: nil];
-    [[NSNotificationCenter defaultCenter]
-     addObserver:self
-     selector:@selector(statusBarFrameOrOrientationChanged:)
-     name:UIApplicationDidChangeStatusBarOrientationNotification
-     object:nil];
-    [[NSNotificationCenter defaultCenter]
-     addObserver:self
-     selector:@selector(statusBarFrameOrOrientationChanged:)
-     name:UIApplicationDidChangeStatusBarFrameNotification
-     object:nil];
+    // From iOS8, we use viewDidLayoutSubviews to handle orientation changes
+    if (!LTHiOS8) {
+        [[NSNotificationCenter defaultCenter]
+         addObserver:self
+         selector:@selector(statusBarFrameOrOrientationChanged:)
+         name:UIApplicationDidChangeStatusBarOrientationNotification
+         object:nil];
+        [[NSNotificationCenter defaultCenter]
+         addObserver:self
+         selector:@selector(statusBarFrameOrOrientationChanged:)
+         name:UIApplicationDidChangeStatusBarFrameNotification
+         object:nil];
+    }
+#endif
 }
 
 
@@ -1552,6 +1603,7 @@
     if (LTHiOS8) {
         _animatingView.frame = self.view.frame;
     }
+#ifndef LTH_APP_EXTENSION
     else {
         if (UIInterfaceOrientationIsPortrait([UIApplication sharedApplication].statusBarOrientation)) {
             _animatingView.frame = CGRectMake(0, 0, [UIApplication sharedApplication].keyWindow.frame.size.width, [UIApplication sharedApplication].keyWindow.frame.size.height);
@@ -1560,6 +1612,7 @@
             _animatingView.frame = CGRectMake(0, 0, [UIApplication sharedApplication].keyWindow.frame.size.height, [UIApplication sharedApplication].keyWindow.frame.size.width);
         }
     }
+#endif
 }
 
 
@@ -1568,8 +1621,14 @@
 // then presenting it inside a modal in another orientation would display
 // the view in the first orientation.
 - (UIInterfaceOrientation)desiredOrientation {
+#ifndef LTH_APP_EXTENSION
     UIInterfaceOrientation statusBarOrientation =
     [[UIApplication sharedApplication] statusBarOrientation];
+#else
+#warning need to find a way to detect all 4 orientations
+    UIInterfaceOrientation statusBarOrientation = (self.view.frame.size.width == ([[UIScreen mainScreen] bounds].size.width*([[UIScreen mainScreen] bounds].size.width<[[UIScreen mainScreen] bounds].size.height))+([[UIScreen mainScreen] bounds].size.height*([[UIScreen mainScreen] bounds].size.width>[[UIScreen mainScreen] bounds].size.height))) ?
+    UIInterfaceOrientationPortrait : UIInterfaceOrientationLandscapeLeft;
+#endif
     UIInterfaceOrientationMask statusBarOrientationAsMask = UIInterfaceOrientationMaskFromOrientation(statusBarOrientation);
     if(self.supportedInterfaceOrientations & statusBarOrientationAsMask) {
         return statusBarOrientation;
@@ -1611,6 +1670,7 @@
 }
 
 
+#ifndef LTH_APP_EXTENSION
 + (CGFloat)getStatusBarHeight {
     UIInterfaceOrientation orientation = [UIApplication sharedApplication].statusBarOrientation;
     if (UIInterfaceOrientationIsLandscape(orientation)) {
@@ -1620,7 +1680,7 @@
         return [UIApplication sharedApplication].statusBarFrame.size.height;
     }
 }
-
+#endif
 
 CGFloat UIInterfaceOrientationAngleOfOrientation(UIInterfaceOrientation orientation) {
     CGFloat angle;
@@ -1648,4 +1708,17 @@
 }
 
 
+// Handle interface rotation for iOS8+ (compatible with App Extensions)
+- (void)viewDidLayoutSubviews
+{
+    if (LTHiOS8)
+    {
+        [super viewDidLayoutSubviews];
+        
+        [self rotateAccordingToStatusBarOrientationAndSupportedOrientations];
+        _animatingView.frame = self.view.frame;
+    }
+}
+
+
 @end
diff -Nur a/Pods/LTHPasscodeViewController/Localizations/fr.lproj/LTHPasscodeViewController.strings b/Pods/LTHPasscodeViewController/Localizations/fr.lproj/LTHPasscodeViewController.strings
--- a/Pods/LTHPasscodeViewController/Localizations/fr.lproj/LTHPasscodeViewController.strings	2014-11-03 22:13:26.000000000 +0100
+++ b/Pods/LTHPasscodeViewController/Localizations/fr.lproj/LTHPasscodeViewController.strings	2014-11-03 22:13:51.000000000 +0100
@@ -1,26 +1,28 @@
 /*
  LTHPasscodeViewController.strings
  */
-"Enter Passcode" = "Entrer votre mot de passe";
+"Enter Passcode" = "Entrez votre mot de passe";
 
-"Enter your old passcode" = "Entrer votre ancien mot de passe";
+"Enter your old passcode" = "Entrez votre ancien mot de passe";
 
-"Enter your passcode" = "Entrer votre mot de passe";
+"Enter your passcode" = "Entrez votre mot de passe";
 
-"Enable Passcode" = "Enter votre mot de passe";
+"Enable Passcode" = "Entez votre mot de passe";
 
-"Change Passcode" = "Changer votre mot de passe";
+"Change Passcode" = "Changez votre mot de passe";
 
-"Turn Off Passcode" = "Supprimer votre mot de passe";
+"Turn Off Passcode" = "Supprimez votre mot de passe";
 
-"Re-enter your passcode" = "Réentrer votre mot de passe";
+"Re-enter your passcode" = "Réentrez votre mot de passe";
 
-"Re-enter your new passcode" = "Réentrer votre nouveau mot de passe";
+"Re-enter your new passcode" = "Réentrez votre nouveau mot de passe";
 
-"Enter your new passcode" = "Entrer votre nouveau mot de passe";
+"Enter your new passcode" = "Entrez votre nouveau mot de passe";
 
-"Passcodes did not match. Try again." = "Les mots de passe ne correspondent pas. Essayer à nouveau.";
+"Passcodes did not match. Try again." = "Les mots de passe ne correspondent pas. Essayez à nouveau.";
 
 "1 Passcode Failed Attempt" = "1 échec";
 
-"%i Passcode Failed Attempts" = "%i échecs";
\ No newline at end of file
+"%i Passcode Failed Attempts" = "%i échecs";
+
+"Unlock using Touch ID" = "Déverrouillez en utilisant le Touch ID";
